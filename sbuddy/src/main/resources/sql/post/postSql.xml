<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="com.sbuddy.web.post.PostMapper">
	
	<!-- 게시글 작성 -->
	<insert id="writePost" parameterType="HashMap">
		INSERT INTO POST (
			  idx_member
			, title
			, content
			, upload_date
		) VALUES (
			  #{idx_login}
			, #{title}
			, #{content}
			, NOW()
		)
		<selectKey keyProperty="idx" resultType="int" order="AFTER">
	        SELECT max(idx) FROM POST
	    </selectKey>
	</insert>

	<!-- 게시글 키워드 -->
	<insert id="writePostKeyword" parameterType="HashMap">
		INSERT INTO POST_KEYWORD (
			  idx_post
			, idx_keyword
		) VALUES (
			  #{idx_post}
			, #{idx_keyword}
		)
	</insert>

	<!-- 게시글 파일 -->
	<insert id="writePostFile" parameterType="HashMap">
		INSERT INTO POST_FILE (
			  idx_post
			, file_name
			, file_path
			, file_size
		) VALUES (
			  #{idx_post}
			, #{file_name}
			, #{file_path}
			, #{file_size}
		)
	</insert>

	<!-- 내 게시글 -->
	<select id="getMyPostList" parameterType="HashMap">
		SELECT
			  idx AS idx_post
			, title
			, content
			, like_cnt
			, upload_date
			, idx_member
			, hits
		FROM
			POST
		WHERE
			idx_member = #{idx_login}
		ORDER BY
			upload_date DESC
	</select>
	
	<!-- 게시글 상세 -->
	<select id="getPostDetail" parameterType="HashMap" resultType="HashMap">
		SELECT
			  p.idx AS idx_post
			, idx_member
			, m.username
			, m.profile
			, title
			, content
			, p.like_cnt 
			, p.hits
		FROM
			POST p
		JOIN
			MEMBER m
		ON p.idx_member = m.idx
		WHERE
			p.idx = #{idx_post}
	</select>

	<!-- 게시글 별 키워드 -->
	<select id="getPostKeyword" parameterType="HashMap">
		SELECT
			  k.idx AS idx_keyword 
			, k.code 
			, k.keyword 
			, pk.idx_post 
		FROM
			POST_KEYWORD pk 
		JOIN KEYWORD k 
		ON k.idx = pk.idx_keyword 
		WHERE
			pk.idx_post = #{idx_post}
	</select>
	
	<!-- 게시글 별 파일 -->
	<select id="getPostFile" parameterType="HashMap">
		SELECT
			  p.idx AS idx_post
			, pf.idx AS idx_post_file
			, pf.file_name
			, pf.file_path
		FROM
			POST_FILE pf 
		JOIN POST p 
		ON p.idx = pf.idx_post
		WHERE
			pf.idx_post = #{idx_post}
	</select>
	
	<!-- 글 수정 -->
	<update id="updatePost" parameterType="HashMap">
		UPDATE POST
		SET 
			  title = #{title}
			, content = #{content}
			, update_date = NOW()
		WHERE 
			idx = #{idx_post}
	</update>
	
	<!-- 글 삭제 -->
	<delete id="deletePost" parameterType="HashMap">
		DELETE FROM 
			POST
		WHERE 
			idx = #{idx_post}
	</delete>
	
	<!-- 키워드 삭제 -->
	<delete id="deletePostKeyword" parameterType="HashMap">
		DELETE FROM 
			POST_KEYWORD
		WHERE 
			idx_post = #{idx_post}
	</delete>
	
	<!-- 파일 삭제 -->
	<delete id="deletePostFile" parameterType="HashMap">
		DELETE FROM 
			POST_FILE
		WHERE 
			idx_post = #{idx_post}
	</delete>
	
	<!-- 내가 좋아요를 한 게시글 리스트 -->
	<select id="getLikeList" parameterType="HashMap">
		SELECT
			  pl.idx_post
			, pl.idx_member
			, p.title 
			, p.content
			, p.like_cnt
			, p.upload_date
			, p.update_date
			, p.end_date
			, p.hits
		FROM
			POST_LIKES pl
		JOIN
			POST p
		ON pl.idx_post = p.idx
		WHERE
			pl.idx_member = #{idx_login}
		ORDER BY
			p.upload_date DESC
	</select>
	
	<!-- 텍스트 검색 -->
	<select id="searchText" parameterType="HashMap">
		SELECT
		  	p.idx AS idx_post
			, p.idx_member
			, m.username 
			, p.hits
			, p.like_cnt 
			, title
			, content
			, like_cnt
			, p.upload_date
			, p.update_date
		FROM
			POST p
		JOIN
			MEMBER m
		ON p.idx_member = m.idx
		<if test="search != null and search != ''">
		WHERE
			(
				title LIKE CONCAT('%', #{search}, '%')
				OR
				content LIKE CONCAT('%', #{search}, '%')
			)
		</if>
		ORDER BY
			p.upload_date DESC
	</select>
	
	<!-- 텍스트 검색 개수 -->
	<select id="searchTextCnt" parameterType="HashMap">
		SELECT
			COUNT(*)
		FROM
			POST
		<if test="search != null and search != ''">
		WHERE
			(
				title LIKE CONCAT('%', #{search}, '%')
				OR
				content LIKE CONCAT('%', #{search}, '%')
			)
		</if>
	</select>
	
	<!-- 키워드 검색 -->
	<select id="searchKeyword" parameterType="HashMap">
		SELECT
			  p.idx AS idx_post
			, p.idx_member
			, p.title
			, p.content
			, p.like_cnt
			, p.upload_date
			, p.update_date
		FROM
			POST p
		JOIN 
			POST_KEYWORD pk
		ON pk.idx_post = p.idx
		JOIN
			KEYWORD k
		ON k.idx = pk.idx_keyword 
		WHERE
			k.idx = #{idx_keyword}
		ORDER BY
			p.upload_date DESC
	</select>
	
	<!-- 키워드 검색 개수 -->
	<select id="searchKeywordCnt" parameterType="HashMap">
		SELECT
			COUNT(*)
		FROM
			POST p
		JOIN 
			POST_KEYWORD pk
		ON pk.idx_post = p.idx
		JOIN
			KEYWORD k
		ON k.idx = pk.idx_keyword 
		WHERE
			k.idx = #{idx_keyword}
		ORDER BY
			p.upload_date DESC
	</select>
	
	<!-- 본인 게시글인지 확인 -->
	<select id="checkMyPost" parameterType="HashMap">
		SELECT
			COUNT(*)
		FROM
			POST 
		WHERE
			idx = #{idx_post}
		AND
			idx_member = #{idx_login}
	</select>
	
	<!-- 최근 검색 중복 확인 -->
	<select id="checkSearch" parameterType="HashMap">
		SELECT
			COUNT(*)
		FROM
			MEMBER_SEARCH
		WHERE
			idx_member = #{idx_login}
		AND search_text = #{search}
	</select>
	
	<!-- 본인의 최근 검색 리스트 -->
	<select id="getSearchRecentList" parameterType="HashMap">
		SELECT
			  idx AS idx_search_text
			, search_text
		FROM
			MEMBER_SEARCH
		WHERE
			idx_member = #{idx_login}
		ORDER BY insert_date DESC
		LIMIT 10
	</select>
	
	<!-- 최근 검색 기록 삭제 -->
	<delete id="deleteSearchRecent" parameterType="HashMap">
		DELETE FROM
			MEMBER_SEARCH
		WHERE
			idx = #{idx_search_text}
		AND idx_member = #{idx_login}
	</delete>
	
	<!-- 최근 검색 기록 전체 삭제 -->
	<delete id="deleteSearchRecentAll" parameterType="HashMap">
		DELETE FROM
			MEMBER_SEARCH
		WHERE
			idx_member = #{idx_login}
	</delete>
	
	<!-- 검색 기록 저장 -->
	<insert id="saveSearch" parameterType="HashMap">
		INSERT INTO MEMBER_SEARCH (
			  idx_member
			, search_text
		) VALUES (
			  #{idx_login}
			, #{search}
		)
	</insert>
	
	
	
	<!-- ####### 게시물 메인 ####### -->
	<!-- 게시물 메인 목록 -->
	<select id="getList" parameterType="HashMap" resultType="HashMap">
		SELECT 
			p.idx idx_post
			, p.idx_member
			, m.username
			, m.profile
			, p.upload_date
			, p.update_date
			, pf.file_path
			, p.title
			, p.content
			, p.like_cnt
			, p.hits
			, IF(ISNULL(pl.idx_member), "false", "true") as is_like
		FROM
			MEMBER m 
		JOIN
			POST p 
		ON m.idx = p.idx_member 
		LEFT JOIN 
			POST_FILE pf 
		ON p.idx = pf.idx_post
		LEFT JOIN
			POST_LIKES pl 
		ON pl.idx_member = #{idx_login}
		AND pl.idx_post = p.idx 
		ORDER BY p.upload_date DESC 
		<where>
			<if test="search != null and search != ''">
				AND title LIKE CONCAT('%', #{search}, '%')
			</if>
		</where>
	</select>
	
	<!-- 게시물 메인 목록 갯수 -->
	<select id="getListCnt" parameterType="HashMap" resultType="int">
		SELECT 
			COUNT(*) 
		FROM
			MEMBER m 
		JOIN
			POST p 
		ON m.idx = p.idx_member 
		JOIN 
			POST_FILE pf 
		ON p.idx = pf.idx_post
		<where>
			<if test="search != null and search != ''">
				AND title LIKE CONCAT('%', #{search}, '%')
			</if>
		</where>
	</select>
	
	<!-- 게시물 키워드 목록 -->
	<select id="getKeywordList" parameterType="HashMap" resultType="HashMap">
		SELECT
			p.idx as idx_post
			, pk.idx_keyword 
			, k.code 
			, k.description
		FROM POST_KEYWORD pk
		JOIN
			POST p 
		ON
			pk.idx_post = p.idx
		JOIN
			KEYWORD k 
		ON pk.idx_keyword = k.idx
	</select>
	
	<!-- 이번주 인기 모집 글 목록 -->
	<select id="getPopularList" resultType="HashMap">
		SELECT
			p.idx idx_post
			, title
			, content
			, like_cnt
			, upload_date
			, hits
			, m.profile
			, m.username
		FROM
			POST p
		JOIN
			MEMBER m
		ON p.idx_member = m.idx
		WHERE
			upload_date BETWEEN DATE(DATE_SUB(NOW(), INTERVAL 7 DAY)) and NOW()
		ORDER BY
			(like_cnt + hits) DESC, upload_date DESC
	</select>
	
	<!-- 게시글 좋아요 -->
	<insert id="postLikes" parameterType="HashMap">
		INSERT INTO POST_LIKES (
			idx_member
			, idx_post
		) VALUES (
			#{idx_login}
			, #{idx_post}
		)
	</insert>
	
	
	<!-- 게시글 좋아요 삭제 -->
	<delete id="deleteLikes" parameterType="HashMap">
		DELETE FROM POST_LIKES
		WHERE
			idx_member = #{idx_login}
		AND idx_post = #{idx_post}
	</delete>
	
	<!-- 게시글이 존재하는지 검사 -->
	<select id="existPost" parameterType="HashMap" resultType="int">
		SELECT
			COUNT(*)
		FROM
			POST
		WHERE
			idx = #{idx_post}
	</select>
	
	<!-- 좋아요 누른 게시글인지 검사 -->
	<select id="countPostLikes" parameterType="HashMap" resultType="int">
		SELECT
			COUNT(*)
		FROM
			POST_LIKES
		WHERE
			idx_post = #{idx_post}
		AND idx_member = #{idx_login}
	</select>
	
	<update id="updateLikesTotal" parameterType="HashMap">
		UPDATE POST p
		SET
			like_cnt = (
				SELECT
					COUNT(*)
				FROM
					POST_LIKES pl
				WHERE
					pl.idx_post = #{idx_post}
			)
		WHERE
			p.idx = #{idx_post}
	</update>
	
	<!-- 조회수 증가 -->
	<update id="updatePostHits" parameterType="HashMap">
		UPDATE POST
		SET
			hits = hits + 1
		WHERE
			idx = #{idx_post}
	</update>
</mapper>